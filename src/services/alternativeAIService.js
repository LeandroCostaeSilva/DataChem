// Servi√ßo alternativo de IA usando Hugging Face (gratuito e global)
// Este servi√ßo ser√° usado como fallback quando o Gemini n√£o estiver dispon√≠vel

const HF_API_URL = "https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium";

// Fun√ß√£o para gerar intera√ß√µes usando Hugging Face
async function generateDrugInteractionsWithHF(drugName) {
  console.log('ü§ñ Usando Hugging Face como alternativa ao Gemini...');
  
  const prompt = `Gere uma tabela de intera√ß√µes medicamentosas para ${drugName}:

| Medicamento | N√≠vel de Intera√ß√£o | Descri√ß√£o | Mecanismo |
|-------------|-------------------|-----------|-----------|
| Exemplo | Moderada | Descri√ß√£o da intera√ß√£o | Mecanismo da intera√ß√£o |

Forne√ßa pelo menos 5 intera√ß√µes conhecidas para ${drugName}.`;

  try {
    const response = await fetch(HF_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        inputs: prompt,
        parameters: {
          max_length: 1000,
          temperature: 0.7,
          do_sample: true
        }
      })
    });

    if (!response.ok) {
      throw new Error(`Erro na API Hugging Face: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ Resposta recebida do Hugging Face');
    
    // Processar resposta
    if (data && data[0] && data[0].generated_text) {
      return data[0].generated_text;
    } else {
      throw new Error('Resposta inv√°lida da API Hugging Face');
    }
  } catch (error) {
    console.error('‚ùå Erro no Hugging Face:', error);
    throw error;
  }
}

// Fun√ß√£o alternativa simples que gera dados mock
function generateMockDrugInteractions(drugName) {
  console.log('üìã Gerando dados mock como √∫ltimo recurso...');
  
  const mockInteractions = [
    {
      medicamento: "Warfarina",
      nivel: "Alta",
      descricao: "Pode aumentar o risco de sangramento",
      mecanismo: "Potencializa√ß√£o do efeito anticoagulante"
    },
    {
      medicamento: "Aspirina",
      nivel: "Moderada", 
      descricao: "Risco aumentado de efeitos gastrointestinais",
      mecanismo: "Inibi√ß√£o sin√©rgica de prostaglandinas"
    },
    {
      medicamento: "Omeprazol",
      nivel: "Baixa",
      descricao: "Poss√≠vel altera√ß√£o na absor√ß√£o",
      mecanismo: "Mudan√ßa no pH g√°strico"
    },
    {
      medicamento: "Metformina",
      nivel: "Moderada",
      descricao: "Monitoramento da glicemia recomendado",
      mecanismo: "Poss√≠vel interfer√™ncia no metabolismo da glicose"
    },
    {
      medicamento: "Atorvastatina",
      nivel: "Baixa",
      descricao: "Risco m√≠nimo de intera√ß√£o",
      mecanismo: "Metabolismo por vias diferentes"
    }
  ];

  // Converter para formato de tabela
  let tableText = `Intera√ß√µes medicamentosas para ${drugName}:\n\n`;
  tableText += "| Medicamento | N√≠vel de Intera√ß√£o | Descri√ß√£o | Mecanismo |\n";
  tableText += "|-------------|-------------------|-----------|-----------|\\n";
  
  mockInteractions.forEach(interaction => {
    tableText += `| ${interaction.medicamento} | ${interaction.nivel} | ${interaction.descricao} | ${interaction.mecanismo} |\\n`;
  });

  tableText += "\n**Nota:** Estes s√£o dados de exemplo. Consulte sempre um profissional de sa√∫de para informa√ß√µes precisas sobre intera√ß√µes medicamentosas.";

  return tableText;
}

export { generateDrugInteractionsWithHF, generateMockDrugInteractions };